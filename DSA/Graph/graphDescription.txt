A Graph is a non-linear data structure that consists of vertices (nodes) and edges.
A vertex, also called a node, is a point or an object in the Graph, and an edge is used to connect two vertices with each other.
Graphs are non-linear because the data structure allows us to have different paths to get from one vertex to another, unlike with linear data structures
like Arrays or Linked Lists.

# Graphs are used to represent and solve problems where the data consists of objects and relationships between them, such as:
    Social Networks: Each person is a vertex, and relationships (like friendships) are the edges. Algorithms can suggest potential friends.
    Maps and Navigation: Locations, like a town or bus stops, are stored as vertices, and roads are stored as edges. Algorithms can find the shortest
     route between two locations when stored as a Graph.
    Internet: Can be represented as a Graph, with web pages as vertices and hyperlinks as edges.
    Biology: Graphs can model systems like neural networks or the spread of diseases.

# Graph Properties:
    A weighted Graph is a Graph where the edges have values. The weight value of an edge can represent things like distance, capacity, time, or probability.
    A connected Graph is when all the vertices are connected through edges somehow. A Graph that is not connected, is a Graph with isolated (disjoint) 
    subgraphs, or single isolated vertices.
    A directed Graph, also known as a digraph, is when the edges between the vertex pairs have a direction. The direction of an edge can represent things like
    hierarchy or flow.
    A cyclic Graph is defined differently depending on whether it is directed or not:
        A directed cyclic Graph is when you can follow a path along the directed edges that goes in circles. Removing the directed edge from F to G in the 
        animation above makes the directed Graph not cyclic anymore.
        An undirected cyclic Graph is when you can come back to the same vertex you started at without using the same edge more than once. The undirected
         Graph above is cyclic because we can start and end up in vertes C without using the same edge twice.

    A loop, also called a self-loop, is an edge that begins and ends on the same vertex. A loop is a cycle that only consists of one edge. By adding the 
    loop on vertex A in the animation above, the Graph becomes cyclic.

# Adjacency Matrix Graph Representation
    Adjacency Matrix is the Graph representation (structure).
    The Adjacency Matrix is a 2D array (matrix) where each cell on index (i,j) stores information about the edge from vertex i to vertex j.
    
    The adjacency matrix above represents an undirected Graph, so the values '1' only tells us where the edges are. Also, the values in the adjacency matrix
    is symmetrical because the edges go both ways (undirected Graph).
    To create a directed Graph with an adjacency matrix, we must decide which vertices the edges go from and to, by inserting the value at the correct indexes 
    (i,j). To represent a weighted Graph we can put other values than '1' inside the adjacency matrix.

# Adjacency List Graph Representation
    In case we have a 'sparse' Graph with many vertices, we can save space by using an Adjacency List compared to using an Adjacency Matrix, because an
    Adjacency Matrix would reserve a lot of memory on empty Array elements for edges that don't exist.
    A 'sparse' Graph is a Graph where each vertex only has edges to a small portion of the other vertices in the Graph.
    An Adjacency List has an array that contains all the vertices in the Graph, and each vertex has a Linked List (or Array) with the vertex's edges.

    Each vertex in the Array has a pointer to a Linked List that represents that vertex's edges. More specifically, the Linked List contains the indexes
    to the adjacent (neighbor) vertices. An Adjacency List can also represent a directed and weighted Graph.

# Graphs Traversal
    traverse a Graph means to start in one vertex, and go along the edges to visit other vertices until all vertices, or as many as possible, have been visited.
    The two most common ways a Graph can be traversed are:
        Depth First Search (DFS)
        Breadth First Search (BFS)

    DFS is usually implemented using a Stack or by the use of recursion (which utilizes the call stack), while BFS is usually implemented using a Queue.

