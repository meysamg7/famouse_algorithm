Hash Table elements are stored in storage containers called buckets.

Every Hash Table element has a part that is unique that is called the key.

A hash function takes the key of an element to generate a hash code.

The hash code says what bucket the element belongs to, so now we can go directly to that Hash Table element: to modify it, or to delete it, or just to check if it exists. Specific hash functions are explained in detail on the next two pages.

A collision happens when two Hash Table elements have the same hash code, because that means they belong to the same bucket. A collision can be solved in two ways.

Chaining is the way collisions are solved in this tutorial, by using arrays or linked lists to allow more than one element in the same bucket.

Open Addressing is another way to solve collisions. With open addressing, if we want to store an element but there is already an element in that bucket, the element is stored in the next available bucket. This can be done in many different ways, but we will not explain open addressing any further here.

Hash Tables are great for:

    Checking if something is in a collection (like finding a book in a library).
    Storing unique items and quickly finding them (like storing phone numbers).
    Connecting values to keys (like linking names to phone numbers).

The most important reason why Hash Tables are great for these things is that Hash Tables are very fast compared Arrays and Linked Lists, especially for large sets. Arrays and Linked Lists have time complexity O(n)
for search and delete, while Hash Tables have just O(1) on average! 


# Hash Set:
 	Every element is a unique key.
    Checking if an element is in the set, like checking if a name is on a guest list.

# Hash Map:
    Every entry is a key-value-pair, with a key that is unique, and a value connected it.
    Finding information based on a key, like looking up who owns a certain telephone number.